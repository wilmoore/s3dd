#!/usr/bin/env bash

################################################################################
# name: s3mkdirs
# what: enumerates a directory mirroring the directory structure to an s3 bucket
# why : some tools need directory objects in S3 to simulate directory browsing
################################################################################

################################################################################
# "Be conservative in what you do; be liberal in which you accept from others."
################################################################################

set -e
set -o errexit
set -o errtrace
set -o nounset

################################################################################
# NOT RECOMMENDED TO MODIFY UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING!
################################################################################

# executable path
declare VERSION=0.1.0

# executable path
declare EXE_PATH=$(cd $(dirname $0);pwd)

# dry run?
declare ISDRYRUN=${DRYRUN-}

# (xargs) -P maxprocs
# Parallel mode: run at most maxprocs invocations of utility at once.
declare MAXPROCS=45

################################################################################
# argument handling
################################################################################

# correct # of arguments?
if [ $# -ne 2 ]; then
    echo "s3mkdirs version $VERSION"
    echo ""
    echo "Usage  : s3mkdirs <source-path> <s3-bucket>"
    echo "Example: s3mkdirs /tmp/client/logos client-logo-assets-bucket"
    exit 1
fi

# directory to enumerate
declare SOURCE_DIRECTORY=$1
# s3 target bucket
declare TARGET_S3_BUCKET=$2

################################################################################
# check for directory existence
################################################################################

# quit if source directory doesn't exist
if [ ! -d $SOURCE_DIRECTORY ]; then
    echo "Source directory (${SOURCE_DIRECTORY}) does not exist."
    exit 1
fi

################################################################################
# check for s3cmd
################################################################################

declare S3CMD_BIN=$(which s3cmd)

if [ -z "$S3CMD_BIN" ]; then
    echo "Unfortunately, we can't continue until the S3cmd binary can be found in your path..."
    exit 1
fi

################################################################################
# check for xargs
################################################################################

declare XARGS_BIN=$(which xargs)

if [ -z "$XARGS_BIN" ]; then
    echo "Unfortunately, we can't continue until the xargs binary can be found in your path..."
    exit 1
fi

################################################################################
# check for sort
################################################################################

declare SORT_BIN=$(which sort)

if [ -z "$SORT_BIN" ]; then
    echo "Unfortunately, we can't continue until the sort binary can be found in your path..."
    exit 1
fi

################################################################################
# check for grep
################################################################################

declare GREP_BIN=$(which grep)

if [ -z "$GREP_BIN" ]; then
    echo "Unfortunately, we can't continue until the grep binary can be found in your path..."
    exit 1
fi

################################################################################
# check for find
################################################################################

declare FIND_BIN=$(which find)

if [ -z "$FIND_BIN" ]; then
    echo "Unfortunately, we can't continue until the find binary can be found in your path..."
    exit 1
fi

################################################################################
# check for cut
################################################################################

declare CUT_BIN=$(which cut)

if [ -z "$CUT_BIN" ]; then
    echo "Unfortunately, we can't continue until the cut binary can be found in your path..."
    exit 1
fi

################################################################################
# what we came to do...
################################################################################

echo ""
echo "Source Directory : $SOURCE_DIRECTORY"
echo "Target S3 Bucket : $TARGET_S3_BUCKET"
echo "(xargs) flags    : -P${MAXPROCS}"

################################################################################
# report directory stats
################################################################################

DIRECTORY_LIST=($(find $SOURCE_DIRECTORY -type d | sed "s@$SOURCE_DIRECTORY/@@" | sed "s@$SOURCE_DIRECTORY@@" | grep -vP '^$'))
DIRECTORY_COUNT=${#DIRECTORY_LIST[@]}

echo "DIRECTORY COUNT  : ${DIRECTORY_COUNT}"

################################################################################
# check for access key
################################################################################

declare ACCESS_KEY=$(s3cmd --dump-config | grep -P '^access_key' | cut -d' ' -f3)

if [ -z "$ACCESS_KEY" ]; then
  echo "You must set the 'ACCESS_KEY' via s3cmd or set the \$ACCESS_KEY environment variable"
  exit 1
fi

################################################################################
# check for secret key
################################################################################

declare SECRET_KEY=$(s3cmd --dump-config | grep -P '^secret_key' | cut -d' ' -f3)

if [ -z "$SECRET_KEY" ]; then
  echo "You must set the 'ACCESS_KEY' via s3cmd or set the \$ACCESS_KEY environment variable"
  exit 1
fi

################################################################################
# build policy document (json)
################################################################################

declare IS_GNUDATE=$(date --version 2>/dev/null|head -n1|grep GNU)

if [[ -n $IS_GNUDATE ]]; then
  declare POLICY_EXP=$(date --utc -d '+1 day' +"%Y-%m-%dT00:00:00Z")
else
  declare POLICY_EXP=$(date -v "+1d" +"%Y-%m-%dT00:00:00Z")
fi

declare POLICY_DOC=$(printf '{"expiration": "%s", "conditions": [ {"bucket": "%s"}, ["starts-with", "$key", ""], {"acl": "public-read"}, ["starts-with", "$Content-Type", "binary/octet-stream"], ["content-length-range", 0, 0] ]}' ${POLICY_EXP} ${TARGET_S3_BUCKET})
#declare POLICY_DOC=$(printf '{"expiration": "%s", "conditions": [ {"bucket": "%s"}, ["starts-with", "$key", ""], {"acl": "public-read"}, ["starts-with", "$Content-Type", "binary/octet-stream"], ["content-length-range", 0, 1048576] ]}' ${POLICY_EXP} ${TARGET_S3_BUCKET})

echo "ORIGINAL POLICY  : ${POLICY_DOC}"
echo ""

POLICY_B64=$(echo ${POLICY_DOC} | openssl base64 | tr -d "\n")

echo "ENCODED DOCUMENT : ${POLICY_B64}"
echo ""

SIGNATURE=$(echo ${POLICY_DOC} | openssl base64 | tr -d "\n" | openssl sha1 -hmac "${SECRET_KEY}" -binary | openssl base64)

echo "SIGNATURE        : ${SIGNATURE}"
echo ""

################################################################################
# create directory function
################################################################################

function create_directory() {
  curl -F "key=${2}/" \
       -F "acl=public-read" \
       -F "policy=$POLICY_B64" \
       -F "signature=$SIGNATURE" \
       -F "AWSAccessKeyId=$ACCESS_KEY" \
       -F "Content-Type=binary/octet-stream" \
       -F "file=@/dev/null" \
  http://${1}.s3.amazonaws.com

  if [[ ${?} == 0 ]]; then
    echo "STATUS           : OK"
  else
    echo "STATUS           : FAILED"
  fi

  echo ""
}

################################################################################
# create directories
################################################################################

for (( i = 0 ; i < DIRECTORY_COUNT ; i++ ))
do
  echo "ABOUT TO CREATE  : ${DIRECTORY_LIST[$i]}"

  if [[ -z ${ISDRYRUN} ]]; then
    create_directory ${TARGET_S3_BUCKET} ${DIRECTORY_LIST[$i]}
  fi
done

